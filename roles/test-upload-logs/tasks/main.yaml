- name: Set zuul-log-path fact
  include_role:
    name: set-zuul-log-path-fact

# Always upload (true), never upload (false) or only on failure ('failure')
- when: zuul_site_upload_logs | default(true) | bool or
        (zuul_site_upload_logs == 'failure' and not zuul_success | bool)
  block:

    - name: Create log directories
      file:
        path: "{{ zuul_logserver_root }}/{{ zuul_log_path }}"
        state: directory
        recurse: yes
        mode: 0775

    - name: Ensure logs are readable before uploading
      delegate_to: localhost
      file:
        path: "{{ zuul.executor.log_root }}/"
        mode: u=rwX,g=rX,o=rX
        state: directory
        recurse: yes

    - name: Prepare a list of files to copy to server
      find:
        paths: "{{ zuul.executor.log_root }}/"
        excludes:
          - "job-output.txt"
          - "job-output.json"
      register: target_files

    - name: Upload logs to log server
      fetch:
        dest: "{{ zuul_logserver_root }}/{{ zuul_log_path }}/"
        src: "{{ item.path }}"
        flat: true
      with_items: "{{ target_files.files }}"
      no_log: "{{ not zuul_log_verbose }}"

    # After this point there are no more logs
    - name: gzip console log and json output
      delegate_to: localhost
      archive:
        path: "{{ zuul.executor.log_root }}/{{ item }}"
      with_items:
        - job-output.txt
        - job-output.json

    - name: Upload console log and json output
      fetch:
        dest: "{{ zuul_logserver_root }}/{{ zuul_log_path }}/{{ item }}.gz"
        src: "{{ zuul.executor.log_root }}/{{ item }}.gz"
        flat: true
      with_items:
        - job-output.txt
        - job-output.json

- name: Return log URL to Zuul
  delegate_to: localhost
  zuul_return:
    data:
      zuul:
        log_url: "{{ zuul_log_url }}/{{ zuul_log_path }}/"
  when: zuul_log_url is defined
